from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import random
import os

TOKEN = "7087944729:AAGt9hKn8uj53oPXJeUqe38dSPlcskiId-c"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

films = ["–í–≤–µ—Ä—Ö", "–í–ê–õ–õ-–ò", "–í –ª–µ—Å, –≥–¥–µ –º–µ—Ä—Ü–∞—é—Ç —Å–≤–µ—Ç–ª—è—á–∫–∏"]

def get_film():
    return random.choice(films)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å", callback_data="open_letter")
    keyboard.add(button)
    await bot.send_photo(message.chat.id, photo=open("envelope.jpg", "rb"), caption="–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–∏—Å—å–º–æ", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "open_letter")
async def open_letter(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É", callback_data="get_valentine")
    keyboard.add(button)
    await bot.send_photo(callback_query.message.chat.id, photo=open("letter.jpg", "rb"), caption="–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–ª–∏ –ø–∏—Å—å–º–æ", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "get_valentine")
async def get_valentine(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton("–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è", callback_data="accept_date")
    button2 = types.InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å", callback_data="decline_date")
    keyboard.add(button1, button2)
    await bot.send_photo(callback_query.message.chat.id, photo=open("valentine.jpg", "rb"), caption="–í–∞–º –ø—Ä–∏—à–ª–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–≤–∏–¥–∞–Ω–∏–µ", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "accept_date")
async def accept_date(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —á—Ç–æ —Å–º–æ—Ç—Ä–µ—Ç—å", callback_data="choose_movie")
    keyboard.add(button)
    await bot.send_message(callback_query.message.chat.id, "–í—Ä–µ–º—è —Å–≤–∏–¥–∞–Ω–∏—è: 8 –≤–µ—á–µ—Ä–∞ –ø–æ –ö–∏–µ–≤—É –∏–ª–∏ 11 –ø–æ –ê–ª–º–∞—Ç—ã", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "choose_movie")
async def choose_movie(callback_query: types.CallbackQuery):
    movie = get_film()
    await bot.send_message(callback_query.message.chat.id, f"–í–∞—à –≤—ã–±–æ—Ä: {movie}\n–ñ–¥—É —Å–∫—Ä–∏–Ω –∏ —Ç–µ–±—è, –ª—é–±–ª—é üíï")

@dp.callback_query_handler(lambda c: c.data == "decline_date")
async def decline_date(callback_query: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="restart")
    keyboard.add(button)
    await bot.send_message(callback_query.message.chat.id, "üòî", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "restart")
async def restart(callback_query: types.CallbackQuery):
    await start(callback_query.message)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
